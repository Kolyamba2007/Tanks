//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.1.1
//     from Assets/Input/Tank Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TankControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TankControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Tank Controls"",
    ""maps"": [
        {
            ""name"": ""Tank"",
            ""id"": ""50152279-b12f-4c7b-9857-cc90a82d2886"",
            ""actions"": [
                {
                    ""name"": ""Shooting"",
                    ""type"": ""Button"",
                    ""id"": ""3707c9f7-fa8f-4ae5-a796-4189583d0ec3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""293db0a2-9c8d-4b61-a4bf-857e758eb69a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""ba0a5f1b-81e5-427a-a938-bfe84c077d82"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""8223e9fb-94c7-478d-912f-ac1a818cb52b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""c9567cc1-d8cf-4f7a-b885-81fe57b9d79e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""6fe8fecd-3706-45b0-afe4-e6cf023e7298"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ed1d749f-ff97-42b5-8f64-14b9eeb1ecee"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shooting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""526f26be-2471-45b6-a25f-cc21ec097e11"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e4ac8115-2c89-4b78-9466-bdc2d25f1905"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df26a2da-53f2-40e2-8b5f-3f515a04b2c8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""86057e74-7a3c-41f2-99e3-8b9aaddb8565"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""661012f9-9324-4d2b-89fb-82abffab1c83"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Tank
        m_Tank = asset.FindActionMap("Tank", throwIfNotFound: true);
        m_Tank_Shooting = m_Tank.FindAction("Shooting", throwIfNotFound: true);
        m_Tank_Up = m_Tank.FindAction("Up", throwIfNotFound: true);
        m_Tank_Down = m_Tank.FindAction("Down", throwIfNotFound: true);
        m_Tank_Left = m_Tank.FindAction("Left", throwIfNotFound: true);
        m_Tank_Right = m_Tank.FindAction("Right", throwIfNotFound: true);
        m_Tank_Pause = m_Tank.FindAction("Pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Tank
    private readonly InputActionMap m_Tank;
    private ITankActions m_TankActionsCallbackInterface;
    private readonly InputAction m_Tank_Shooting;
    private readonly InputAction m_Tank_Up;
    private readonly InputAction m_Tank_Down;
    private readonly InputAction m_Tank_Left;
    private readonly InputAction m_Tank_Right;
    private readonly InputAction m_Tank_Pause;
    public struct TankActions
    {
        private @TankControls m_Wrapper;
        public TankActions(@TankControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shooting => m_Wrapper.m_Tank_Shooting;
        public InputAction @Up => m_Wrapper.m_Tank_Up;
        public InputAction @Down => m_Wrapper.m_Tank_Down;
        public InputAction @Left => m_Wrapper.m_Tank_Left;
        public InputAction @Right => m_Wrapper.m_Tank_Right;
        public InputAction @Pause => m_Wrapper.m_Tank_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Tank; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TankActions set) { return set.Get(); }
        public void SetCallbacks(ITankActions instance)
        {
            if (m_Wrapper.m_TankActionsCallbackInterface != null)
            {
                @Shooting.started -= m_Wrapper.m_TankActionsCallbackInterface.OnShooting;
                @Shooting.performed -= m_Wrapper.m_TankActionsCallbackInterface.OnShooting;
                @Shooting.canceled -= m_Wrapper.m_TankActionsCallbackInterface.OnShooting;
                @Up.started -= m_Wrapper.m_TankActionsCallbackInterface.OnUp;
                @Up.performed -= m_Wrapper.m_TankActionsCallbackInterface.OnUp;
                @Up.canceled -= m_Wrapper.m_TankActionsCallbackInterface.OnUp;
                @Down.started -= m_Wrapper.m_TankActionsCallbackInterface.OnDown;
                @Down.performed -= m_Wrapper.m_TankActionsCallbackInterface.OnDown;
                @Down.canceled -= m_Wrapper.m_TankActionsCallbackInterface.OnDown;
                @Left.started -= m_Wrapper.m_TankActionsCallbackInterface.OnLeft;
                @Left.performed -= m_Wrapper.m_TankActionsCallbackInterface.OnLeft;
                @Left.canceled -= m_Wrapper.m_TankActionsCallbackInterface.OnLeft;
                @Right.started -= m_Wrapper.m_TankActionsCallbackInterface.OnRight;
                @Right.performed -= m_Wrapper.m_TankActionsCallbackInterface.OnRight;
                @Right.canceled -= m_Wrapper.m_TankActionsCallbackInterface.OnRight;
                @Pause.started -= m_Wrapper.m_TankActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_TankActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_TankActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_TankActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Shooting.started += instance.OnShooting;
                @Shooting.performed += instance.OnShooting;
                @Shooting.canceled += instance.OnShooting;
                @Up.started += instance.OnUp;
                @Up.performed += instance.OnUp;
                @Up.canceled += instance.OnUp;
                @Down.started += instance.OnDown;
                @Down.performed += instance.OnDown;
                @Down.canceled += instance.OnDown;
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public TankActions @Tank => new TankActions(this);
    public interface ITankActions
    {
        void OnShooting(InputAction.CallbackContext context);
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
}
